"""
–û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤ –ø–æ –¥–∏–∞–≥–Ω–æ–∑–∞–º
–ó–∞–¥–∞–Ω–∏–µ 14: –†–∞—Å—á–µ—Ç –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–∏–∞–≥–Ω–æ–∑–∞
"""

import pandas as pd
import numpy as np
import json
import os
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime

class MedicationCostAnalyzer:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤ –ø–æ –¥–∏–∞–≥–Ω–æ–∑–∞–º"""
    
    def __init__(self):
        self.df_patients = None
        self.df_medications = None
        self.df_prices = None
        self.df_consolidated = None
        self.diagnosis_costs = None
        self.drug_usage = None
        
    def load_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        print("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–∞—Ü–∏–µ–Ω—Ç–∞—Ö (CSV)
            self.df_patients = pd.read_csv('data/patients.csv')
            print(f"‚úì –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ {len(self.df_patients)} –ø–∞—Ü–∏–µ–Ω—Ç–∞—Ö")
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è—Ö (Excel)
            self.df_medications = pd.read_excel('data/medications.xlsx')
            print(f"‚úì –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ {len(self.df_medications)} –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è—Ö")
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–∞—Ö (JSON)
            with open('data/drug_prices.json', 'r', encoding='utf-8') as f:
                prices_data = json.load(f)
            self.df_prices = pd.DataFrame(prices_data)
            print(f"‚úì –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ {len(self.df_prices)} –ª–µ–∫–∞—Ä—Å—Ç–≤–∞—Ö")
            
            return True
            
        except FileNotFoundError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ data_generator.py –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            return False
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    def data_quality_check(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö"""
        print("\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            print("–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:")
            print(f"  - –ü–∞—Ü–∏–µ–Ω—Ç—ã: {self.df_patients.isnull().sum().sum()}")
            print(f"  - –ù–∞–∑–Ω–∞—á–µ–Ω–∏—è: {self.df_medications.isnull().sum().sum()}")
            print(f"  - –¶–µ–Ω—ã: {self.df_prices.isnull().sum().sum()}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            print("\n–î—É–±–ª–∏–∫–∞—Ç—ã:")
            print(f"  - –ü–∞—Ü–∏–µ–Ω—Ç—ã: {self.df_patients['patient_id'].duplicated().sum()}")
            print(f"  - –ù–∞–∑–Ω–∞—á–µ–Ω–∏—è: {self.df_medications['prescription_id'].duplicated().sum()}")
            print(f"  - –¶–µ–Ω—ã: {self.df_prices.duplicated(subset=['drug_name']).sum()}")
            
            # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            print("\n–ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"  - –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–∏–∞–≥–Ω–æ–∑–æ–≤: {self.df_patients['diagnosis'].nunique()}")
            print(f"  - –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤: {self.df_medications['drug_name'].nunique()}")
            print(f"  - –°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤: {self.df_patients['age'].mean():.1f} –ª–µ—Ç")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    def consolidate_data(self):
        """–ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç—Ä–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        print("\n–ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π —Å —Ü–µ–Ω–∞–º–∏
            df_meds_prices = pd.merge(self.df_medications, self.df_prices, 
                                     on='drug_name', how='inner')
            
            # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
            self.df_consolidated = pd.merge(df_meds_prices, self.df_patients, 
                                           on=['patient_id', 'diagnosis'], how='inner')
            
            print(f"‚úì –ö–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(self.df_consolidated)} –∑–∞–ø–∏—Å–µ–π")
            
            # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ –¥–∏–∞–≥–Ω–æ–∑–∞–º
            self.calculate_diagnosis_costs()
            
            # –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ª–µ–∫–∞—Ä—Å—Ç–≤
            self.analyze_drug_usage()
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    def calculate_diagnosis_costs(self):
        """–†–∞—Å—á–µ—Ç –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–∏–∞–≥–Ω–æ–∑–∞"""
        try:
            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∏–∞–≥–Ω–æ–∑–∞–º
            diagnosis_groups = self.df_consolidated.groupby('diagnosis')
            
            # –ê–≥—Ä–µ–≥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            self.diagnosis_costs = diagnosis_groups.agg({
                'patient_id': 'nunique',
                'prescription_id': 'count',
                'drug_name': 'nunique',
                'price': 'sum'
            }).round(2)
            
            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤
            self.diagnosis_costs.columns = ['patient_count', 'total_prescriptions', 'unique_drugs', 'total_cost']
            
            # –†–∞—Å—á–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
            self.diagnosis_costs['avg_cost_per_patient'] = (
                self.diagnosis_costs['total_cost'] / self.diagnosis_costs['patient_count']
            ).round(2)
            
            self.diagnosis_costs['avg_prescriptions_per_patient'] = (
                self.diagnosis_costs['total_prescriptions'] / self.diagnosis_costs['patient_count']
            ).round(2)
            
            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
            self.diagnosis_costs = self.diagnosis_costs.sort_values('total_cost', ascending=False)
            
            print(f"‚úì –†–∞—Å—Å—á–∏—Ç–∞–Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è {len(self.diagnosis_costs)} –¥–∏–∞–≥–Ω–æ–∑–æ–≤")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ –¥–∏–∞–≥–Ω–æ–∑–∞–º: {e}")
            raise
    
    def analyze_drug_usage(self):
        """–ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ª–µ–∫–∞—Ä—Å—Ç–≤"""
        try:
            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞–º
            drug_groups = self.df_consolidated.groupby('drug_name')
            
            self.drug_usage = drug_groups.agg({
                'prescription_id': 'count',
                'diagnosis': 'nunique',
                'patient_id': 'nunique',
                'price': 'mean'
            }).round(2)
            
            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤
            self.drug_usage.columns = ['usage_count', 'diagnoses_count', 'patients_count', 'avg_price']
            
            # –†–∞—Å—á–µ—Ç –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ –ª–µ–∫–∞—Ä—Å—Ç–≤—É
            self.drug_usage['total_cost'] = (
                self.drug_usage['usage_count'] * self.drug_usage['avg_price']
            ).round(2)
            
            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
            self.drug_usage = self.drug_usage.sort_values('total_cost', ascending=False)
            
            print(f"‚úì –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(self.drug_usage)} –ª–µ–∫–∞—Ä—Å—Ç–≤")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ª–µ–∫–∞—Ä—Å—Ç–≤: {e}")
            raise
    
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –≤—ã–≤–æ–¥–∞–º–∏"""
        try:
            print("\n" + "="*70)
            print("–ê–ù–ê–õ–ò–¢–ò–ß–ï–°–ö–ò–ô –û–¢–ß–ï–¢: –°–¢–û–ò–ú–û–°–¢–¨ –õ–ï–ö–ê–†–°–¢–í –ü–û –î–ò–ê–ì–ù–û–ó–ê–ú")
            print("="*70)
            
            total_cost = self.diagnosis_costs['total_cost'].sum()
            
            print(f"\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            print(f"  ‚Ä¢ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å–µ—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤: {total_cost:,.0f} —Ä—É–±.")
            print(f"  ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∏–∞–≥–Ω–æ–∑–æ–≤: {len(self.diagnosis_costs)}")
            print(f"  ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤: {self.df_patients['patient_id'].nunique()}")
            print(f"  ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π: {len(self.df_medications)}")
            print(f"  ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤: {self.df_prices['drug_name'].nunique()}")
            
            print(f"\nüè• –¢–û–ü-5 –°–ê–ú–´–• –ó–ê–¢–†–ê–¢–ù–´–• –î–ò–ê–ì–ù–û–ó–û–í:")
            for i, (diagnosis, row) in enumerate(self.diagnosis_costs.head(5).iterrows(), 1):
                cost = row['total_cost']
                patients = int(row['patient_count'])
                cost_per_patient = row['avg_cost_per_patient']
                percentage = (cost / total_cost) * 100
                
                print(f"  {i}. {diagnosis}:")
                print(f"     ‚Ä¢ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {cost:,.0f} —Ä—É–±. ({percentage:.1f}%)")
                print(f"     ‚Ä¢ –ü–∞—Ü–∏–µ–Ω—Ç–æ–≤: {patients}")
                print(f"     ‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞ –ø–∞—Ü–∏–µ–Ω—Ç–∞: {cost_per_patient:,.0f} —Ä—É–±.")
                print(f"     ‚Ä¢ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–π: {int(row['total_prescriptions'])}")
            
            print(f"\nüíä –¢–û–ü-5 –°–ê–ú–´–• –ò–°–ü–û–õ–¨–ó–£–ï–ú–´–• –õ–ï–ö–ê–†–°–¢–í:")
            for i, (drug, row) in enumerate(self.drug_usage.head(5).iterrows(), 1):
                usage = int(row['usage_count'])
                drug_cost = row['total_cost']
                avg_price = row['avg_price']
                patients = int(row['patients_count'])
                
                print(f"  {i}. {drug}:")
                print(f"     ‚Ä¢ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–π: {usage}")
                print(f"     ‚Ä¢ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {drug_cost:,.0f} —Ä—É–±.")
                print(f"     ‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {avg_price:,.0f} —Ä—É–±.")
                print(f"     ‚Ä¢ –ü–∞—Ü–∏–µ–Ω—Ç–æ–≤: {patients}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            return False
    
    def create_visualizations(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π"""
        try:
            print("\n–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π...")
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
            plt.style.use('default')
            sns.set_palette("husl")
            plt.rcParams['figure.figsize'] = (12, 8)
            plt.rcParams['font.size'] = 12
            
            # –ì—Ä–∞—Ñ–∏–∫ 1: –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ –¥–∏–∞–≥–Ω–æ–∑–∞–º (—Ç–æ–ø-10)
            fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 6))
            
            top_10_diagnoses = self.diagnosis_costs.head(10)
            
            # –õ–µ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞: –æ–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
            bars1 = ax1.bar(range(len(top_10_diagnoses)), top_10_diagnoses['total_cost'], 
                          color=sns.color_palette("viridis", len(top_10_diagnoses)))
            ax1.set_title('–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤ –ø–æ –¥–∏–∞–≥–Ω–æ–∑–∞–º (—Ç–æ–ø-10)', fontsize=14, fontweight='bold')
            ax1.set_xlabel('–î–∏–∞–≥–Ω–æ–∑—ã', fontsize=12)
            ax1.set_ylabel('–°—Ç–æ–∏–º–æ—Å—Ç—å (—Ä—É–±.)', fontsize=12)
            ax1.set_xticks(range(len(top_10_diagnoses)))
            ax1.set_xticklabels(top_10_diagnoses.index, rotation=45, ha='right')
            ax1.grid(axis='y', alpha=0.3)
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
            for i, bar in enumerate(bars1):
                height = bar.get_height()
                ax1.text(bar.get_x() + bar.get_width()/2., height + height*0.01,
                        f'{height:,.0f}', ha='center', va='bottom', fontsize=9)
            
            # –ü—Ä–∞–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞: —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞ –ø–∞—Ü–∏–µ–Ω—Ç–∞
            cost_per_patient = top_10_diagnoses.sort_values('avg_cost_per_patient', ascending=True)
            bars2 = ax2.barh(range(len(cost_per_patient)), cost_per_patient['avg_cost_per_patient'],
                           color=sns.color_palette("plasma", len(cost_per_patient)))
            ax2.set_title('–°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –ø–æ –¥–∏–∞–≥–Ω–æ–∑–∞–º', fontsize=14, fontweight='bold')
            ax2.set_xlabel('–°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞ –ø–∞—Ü–∏–µ–Ω—Ç–∞ (—Ä—É–±.)', fontsize=12)
            ax2.set_ylabel('–î–∏–∞–≥–Ω–æ–∑—ã', fontsize=12)
            ax2.set_yticks(range(len(cost_per_patient)))
            ax2.set_yticklabels(cost_per_patient.index)
            ax2.grid(axis='x', alpha=0.3)
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
            for i, bar in enumerate(bars2):
                width = bar.get_width()
                ax2.text(width + width*0.01, bar.get_y() + bar.get_height()/2.,
                        f'{width:,.0f}', ha='left', va='center', fontsize=9)
            
            plt.tight_layout()
            plt.savefig('results/diagnosis_costs_comparison.png', dpi=300, bbox_inches='tight')
            plt.close()
            
            # –ì—Ä–∞—Ñ–∏–∫ 2: –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏
            plt.figure(figsize=(10, 8))
            
            # –ë–µ—Ä–µ–º —Ç–æ–ø-6 –¥–∏–∞–≥–Ω–æ–∑–æ–≤, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–¥–∏–Ω—è–µ–º –≤ "–î—Ä—É–≥–∏–µ"
            top_6 = self.diagnosis_costs.head(6)
            others_cost = self.diagnosis_costs['total_cost'][6:].sum()
            
            pie_data = top_6['total_cost'].tolist() + [others_cost]
            pie_labels = top_6.index.tolist() + ['–î—Ä—É–≥–∏–µ']
            
            colors = plt.cm.Set3(np.linspace(0, 1, len(pie_data)))
            wedges, texts, autotexts = plt.pie(pie_data, labels=pie_labels, autopct='%1.1f%%',
                                              colors=colors, startangle=90)
            
            plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤ –ø–æ –¥–∏–∞–≥–Ω–æ–∑–∞–º', 
                     fontsize=16, fontweight='bold', pad=20)
            
            # –£–ª—É—á—à–µ–Ω–∏–µ —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
            for autotext in autotexts:
                autotext.set_color('black')
                autotext.set_fontweight('bold')
                autotext.set_fontsize(10)
            
            plt.axis('equal')
            plt.savefig('results/cost_distribution_pie.png', dpi=300, bbox_inches='tight')
            plt.close()
            
            print("‚úì –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ 'results/'")
            print("  - diagnosis_costs_comparison.png")
            print("  - cost_distribution_pie.png")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π: {e}")
            return False
    
    def save_results(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            print("\n–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Excel
            with pd.ExcelWriter('results/diagnosis_cost_analysis.xlsx') as writer:
                self.diagnosis_costs.to_excel(writer, sheet_name='–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ –¥–∏–∞–≥–Ω–æ–∑–∞–º')
                self.drug_usage.to_excel(writer, sheet_name='–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤')
                self.df_consolidated.to_excel(writer, sheet_name='–ö–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', index=False)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            summary_stats = {
                'analysis_date': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                'total_patients': int(self.df_patients['patient_id'].nunique()),
                'total_prescriptions': int(len(self.df_medications)),
                'total_drugs': int(self.df_prices['drug_name'].nunique()),
                'total_diagnoses': int(self.df_patients['diagnosis'].nunique()),
                'total_medication_cost': float(self.diagnosis_costs['total_cost'].sum()),
                'avg_cost_per_patient': float(self.diagnosis_costs['avg_cost_per_patient'].mean()),
                'most_expensive_diagnosis': self.diagnosis_costs.index[0],
                'most_used_drug': self.drug_usage.index[0],
                'top_diagnoses': {}
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø-5 –¥–∏–∞–≥–Ω–æ–∑–æ–≤
            for diagnosis, row in self.diagnosis_costs.head(5).iterrows():
                summary_stats['top_diagnoses'][diagnosis] = {
                    'total_cost': float(row['total_cost']),
                    'patient_count': int(row['patient_count']),
                    'avg_cost_per_patient': float(row['avg_cost_per_patient'])
                }
            
            with open('results/summary_statistics.json', 'w', encoding='utf-8') as f:
                json.dump(summary_stats, f, ensure_ascii=False, indent=2)
            
            print("‚úì –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ 'results/'")
            print("  - diagnosis_cost_analysis.xlsx")
            print("  - summary_statistics.json")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
            return False
    
    def run_analysis(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        print("–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤ –ø–æ –¥–∏–∞–≥–Ω–æ–∑–∞–º...")
        print("=" * 60)
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É results –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if not os.path.exists('results'):
            os.makedirs('results')
        
        # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–∞–ø–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
        steps = [
            ("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö", self.load_data),
            ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö", self.data_quality_check),
            ("–ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö", self.consolidate_data),
            ("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞", self.generate_report),
            ("–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π", self.create_visualizations),
            ("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", self.save_results)
        ]
        
        for step_name, step_func in steps:
            print(f"\n[{step_name}]")
            success = step_func()
            if not success:
                print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ: {step_name}")
                return False
        
        print("\n" + "="*60)
        print("üéâ –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print("\nüìã –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print(f"   ‚Ä¢ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤: {self.diagnosis_costs['total_cost'].sum():,.0f} —Ä—É–±.")
        print(f"   ‚Ä¢ –°–∞–º—ã–π –∑–∞—Ç—Ä–∞—Ç–Ω—ã–π –¥–∏–∞–≥–Ω–æ–∑: {self.diagnosis_costs.index[0]}")
        print(f"   ‚Ä¢ –°–∞–º–æ–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ: {self.drug_usage.index[0]}")
        print(f"   ‚Ä¢ –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ 'results/'")
        
        return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    analyzer = MedicationCostAnalyzer()
    success = analyzer.run_analysis()
    
    if success:
        print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        return 0
    else:
        print("\n‚ùå –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏")
        return 1

if __name__ == "__main__":
    exit(main())